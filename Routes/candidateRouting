
const express = require('express');
const router = express.Router();
const Candidate = require('../Models/candidate');
const User = require('../Models/user')
const {jwtAuthMiddleware, genrateToken} = require('../jwt');


// Function chek the admin role or not 

const checkAdminOrNot =async (userID) => {
    try {
        const candidate = await User.findById(userID);
        if(candidate.role === 'admin') {
            return true
        }
    } catch (error) {
        return false;
    }
}

// Add Candidate
// "addharCardNumber": "234567890123",
// "password": "adminpassword456"
router.post('/',jwtAuthMiddleware, async (req, res)=>{
    try{
        if(!(await checkAdminOrNot(req.user.id)))
            return res.status(403).json({messsage : 'User does not have admin role '})

        const data = req.body;
        const newCandidate = new Candidate (data);
        const response = await newCandidate.save();
        console.log('Candidated data added')
        res.status(200).json({response : response });

    }
    catch(err){
        console.log(err);
        res.status(500).json({err : 'Server side issues'});
    }
    
})


// Upadte the candidate by ID
router.put('/:candidateID',jwtAuthMiddleware, async (req, res)=>{
    try {

        if(!(await checkAdminOrNot(req.user.id)))
            return res.status(403).json({messsage : 'User does not have admin role '})

        const candidateID = req.params.candidateID;
        const updatecandidateID = req.body;

        const response = await Candidate.findByIdAndUpdate(candidateID, updatecandidateID, {
            new : true,
            runValidators : true 
        })

        if(!response){
            return res.status(404).json({error : 'data not found '})
        }

        res.status(200).json(response);
        console.log('update is done !');

    } catch (error) {
        console.log(error);
        res.status(500).json({error : 'server side error'})
    }
})


// Delete the candidate
router.delete('/:candidateID',jwtAuthMiddleware, async (req, res)=>{
    try {

        if(! (await checkAdminOrNot(req.user.id)))
            return res.status(403).json({messsage : 'User does not have admin role '})

        const candidateID = req.params.candidateID;

        const response = await Candidate.findByIdAndDelete(candidateID)

        if(!response){
            return res.status(404).json({error : 'Candidate not found '})
        }
 
        res.status(200).json({messsage : 'Candidate deleted'});
        console.log('update is done !');

    } catch (error) {
        console.log(error);
        res.status(500).json({error : 'server side error'})
    }
})

// Give Vote 
router.post('/vote/:candidateID', jwtAuthMiddleware, async(req,res)=>{
    // need user which id get from the token
    const candidateID = req.params.candidateID;
    const userID = req.user.id;
    try {
        const candidate = await Candidate.findById(candidateID)
        if(!candidate)
            return res.status(404).json({messsage : 'Candidate not found'})
            
        const user = await User.findById(userID)
        if(!user) 
           return res.status(404).json({messsage : 'User not found'})
        if(user.isVoted)
            return res.status(404).json({messsage : 'Already vote is given by user'})
        if(user.role === 'admin')
            return res.status(404).json({messsage : 'Admin can not give the vote !'})

        // Update the Candidate data
        candidate.votes.push({user:userID})
        candidate.voteCount++
        await candidate.save()
        
        // Update the user data 
        user.isVoted = true;
        await user.save();

        res.status(200).json({messsage : 'Vote given process is done !'});

    } catch (error) {
        console.log(error);
        res.status(500).json({error : 'server side error'})
    }

})


// Vote Counting 

router.get('/vote/count', async (req,res)=>{
    try {
        // Find all the candidates with the descending order
        const candidate = await Candidate.find().sort({voteCount:'desc'})

        // Map the candidates to only return name of party and voteCount 
        const VoteCount = candidate.map((data)=>{
            return{
                party : data.party,
                count : data.voteCount
            }
        })

        return res.status(200).json(VoteCount);
    } catch (error) {
        console.log(error);
        res.status(500).json({error : 'server side error'})
    }
})

module.exports = router;